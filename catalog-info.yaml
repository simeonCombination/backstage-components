#apiVersion: backstage.io/v1alpha1
#kind: Component
#metadata:
#  name: search-engine
#  description: search engine description (cannot put links here)
#  annotations:
#    github.com/project-slug: CombinationAB/Sports-Search-Engine
#    #backstage.io/managed-by-location: url:https://github.com/CombinationAB/Sports-Search-Engine
#    #backstage.io/managed-by-origin-location: url:https://github.com/CombinationAB/Sports-Search-Engine
#    backstage.io/techdocs-ref: url:https://github.com/CombinationAB/Sports-Search-Engine
#    backstage.io/view-url: https://github.com/CombinationAB/Sports-Search-Engine
#    backstage.io/edit-url: https://github.com/CombinationAB/Sports-Search-Engine    
#  links:
#    - url: https://github.com/CombinationAB/Sports-Search-Engine
#      title: GitHub Repo
#      icon: github
#spec:
#  type: service
#  lifecycle: production
#  owner: group:product-search
#  system: system-a
#  subcomponentOf: Sports-Search-Engine
#  #hasPart:
#  #  - component:search-adapter
#  #  - component:search-indexer
#  #partOf:
#  #  - component:Sports-Search-Engine
#---
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: search-adapter
  description: search adapter description search adapter description search adapter description search adapter description
  annotations:
    github.com/project-slug: CombinationAB/Sports-Search-Engine
    backstage.io/techdocs-ref: url:https://github.com/CombinationAB/Sports-Search-Engine
    backstage.io/view-url: https://github.com/CombinationAB/Sports-Search-Engine
    backstage.io/edit-url: https://github.com/CombinationAB/Sports-Search-Engine    
  links:
    - url: https://github.com/CombinationAB/Sports-Search-Engine
      title: GitHub Repo
      icon: github    
spec:
  type: service
  lifecycle: production
  owner: group:product-search
  system: system-a
  subcomponentOf: Sports-Search-Engine
  #partOf:
  #  - component:search-engine
  dependsOn:
    - component:elastic-search
  providesApis:
    - search-adapter-api
---
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: search-indexer
  description: search indexer description search indexer description search indexer description search indexer description 
spec:
  type: service
  lifecycle: production
  owner: group:product-search
  system: system-a
  subcomponentOf: Sports-Search-Engine  
  #partOf:
  #  - component:search-engine
  dependencyOf:
    - component:elastic-search
  dependsOn:
    #- component:core-mapper-service
    - resource:cmbentities--popularity-static
  consumesApis:
    - core-mapper-service-api-offer.Offer
---
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: elastic-search
  description: elastic search description elastic search description elastic search description elastic search description 
spec:
  type: library
  lifecycle: production
  owner: group:product-search
  system: system-a
  dependsOn:
    - component:search-indexer
  dependencyOf:
    - component:search-adapter
---
apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: search-adapter-api
  description: search/completions/suggestions
spec:
  type: openapi
  lifecycle: production
  owner: group:product-search
  system: system-a
  definition: |
    openapi: "3.0.0"
    info:
      version: 1.0.0
      title: Search Engine API (search/completions/suggestions)
    servers:
      - url: https://search-master-engine-adapter.cmbsports.dev/search/v1
    paths:
      /search:
        post:
          summary: matching search records
      /completions:
        post:
          summary: completions matching the search term
      /suggestions:
        post:
          summary: suggests entities based on country code (using static popularity)
---
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: core-mapper-service
  description: core mapper service description
spec:
  type: service
  lifecycle: production
  owner: group:product-search
  system: system-a
  subcomponentOf: Sports-Client-SportsbookCoreMapper
  #partOf:
  #  - component:Sports-Client-SportsbookCoreMapper
  #dependencyOf:
  #  - component:search-indexer
  providesApis:
    - core-mapper-service-api-offer.Offer
    - core-mapper-service-api-scoreboard.Scoreboards    
---
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: entity-service
  description: entity service description
spec:
  type: service
  lifecycle: production
  owner: group:product-search
  system: system-a
  #subcomponentOf: Sports-Entity-Service
  dependsOn:
    - resource:cmbentities--popularity-realtime
---
apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: core-mapper-service-api-offer.Offer
  description: GetCoreIdentifierValues / GetEvent / GetEvents / GetIdentifierValues / GetLanguages / SelectEventIds / SelectEvents / SubscribeChangedEvents
spec:
  type: grpc
  lifecycle: production
  owner: group:product-search
  system: system-a
  definition: |
    syntax = "proto3";

    option csharp_namespace = "SportsbookCore.Mapper.Api";

    package offer;

    import "google/protobuf/wrappers.proto";
    import "google/protobuf/timestamp.proto";
    import "Offer/Event.proto";
    import "Offer/Common.proto";

    service Offer {

      rpc GetEvent (GetEventRequest) returns (GetEventResponse) {
          option deprecated = true;
      };

      rpc GetEvents (GetEventsRequest) returns (GetEventsResponse) {
          option deprecated = true;
      };

      rpc SelectEvents (SelectEventsRequest) returns (GetEventsResponse);

      rpc SelectEventIds (SelectEventIdsRequest) returns (GetEventIdsResponse);

      rpc GetIdentifierValues (GetIdentifierValuesRequest) returns (GetIdentifierValuesResponse);

      rpc GetCoreIdentifierValues (GetCoreIdentifierValuesRequest) returns (GetCoreIdentifierValuesResponse);

      rpc SubscribeChangedEvents (SubscribeChangedEventsRequest) returns (stream SubscribeChangedEventsResponse);

      rpc GetLanguages (GetLanguagesRequest) returns (GetLanguagesResponse);
    }

    message GetEventRequest {
      int64 eventId = 1;
      EventSubselection subselection = 2;
    }

    message GetEventResponse {
      Event event = 1;
      google.protobuf.Timestamp lastEventUpdate = 2;
    }

    message GetLanguagesRequest {
    }

    message GetLanguagesResponse {
      repeated string languages = 1;
    }

    message GetEventsRequest {
      repeated int64 eventIds = 1;
      EventSubselection subselection = 2;
      EventSortingStrategy sortingStrategy = 3;
    }

    message GetEventsResponse {
      repeated Event events = 1;
      google.protobuf.Timestamp lastEventUpdate = 2;
    }

    message SelectEventIdsRequest {
      EventSelector selector = 1;
      int64 maxResults = 2;
      EventSortingStrategy sortingStrategy = 3;
    }

    message SelectEventsRequest {
      EventSelector selector = 1;
      EventSubselection subselection = 2;
      int64 maxResults = 3;
      EventSortingStrategy sortingStrategy = 4;
    }

    message GetEventIdsResponse {
      repeated int64 eventIds = 1;
    }

    message SubscribeChangedEventsRequest {
      EventSelector selector = 1;
      int64 maxResults = 2;
      google.protobuf.Timestamp updatesSince = 3;
    }

    message SubscribeChangedEventsResponse {
      int64 eventId = 1;
      google.protobuf.Int64Value marketId = 2;
      google.protobuf.Int64Value outcomeId = 3;
      google.protobuf.Timestamp lastUpdated = 4;
    }

    message GetIdentifierValuesRequest {
      IdentifierType identifier = 1;
      EventSelector selector = 2;
      repeated string languages = 3;
    }

    message GetCoreIdentifierValuesRequest {
      CoreIdentifierType identifier = 1;
      EventSelector selector = 2;
    }

    message GetCoreIdentifierValuesResponse {
      repeated string values = 1;
    }

    message GetIdentifierValuesResponse {
      repeated Property values = 1;
    }

    /* The EventSelector is evaluated for an event and determines if the event is going to be included in the result.
     * In case of multiple filters, the boolean operator between them is OR - that means that an event needs to match at least one filter to be selected.
     * The boolean operator between conditions within a filter is AND - that means that an event needs to match all the conditions in a filter to be selected by it.
     * When the value for a filter condition is a list (like eventIdIn, marketIdIn or outcomeIdIn) the condition is true when the event matches at least one of the values in the list.
     * Empty list for eventIdIn, marketIdIn or outcomeIdIn means there is no condition on those ids. */
    message EventSelector {
        reserved 2; // Jurisdiction id
        repeated EventSelectorFilter filters = 1;
        string countryCode = 3;
    }

    message EventSelectorFilter {
        google.protobuf.BoolValue isLive = 1;
        google.protobuf.BoolValue isOutright = 2;
        google.protobuf.BoolValue isVirtual = 3;
        google.protobuf.BoolValue isActive = 4;
        google.protobuf.BoolValue isDisplayed = 5;
        EventCoreIdentifiers coreIdentifiers = 10;
        EventIdentifiers identifiers = 11;
        repeated int64 eventIdIn = 12;
        repeated int64 marketIdIn = 13;
        repeated int64 outcomeIdIn = 14;
    }

    /* The EventSubselection determines what information for the event will be included in the response.
     * In case includeMarkets==OnlySpecifiedMarkets the response will contain only the markets specified in the selector (in any of its filters) and the markets that have an outcome specified in the selector.
     * In case includeOutcomes==OnlySpecifiedOutcomes the resonse will contain only the outcomes specified in the selector.
     * Since an outcome cannot exist without a market, requests that ask for outcomes (includeOutcomes!=NoOutcomes) but at the same time exclude the markets (includeMarkets==NoMarkets) are invalid.
     */
    message EventSubselection {
      MarketTypeSelection includeMarkets = 1;
      OutcomeSelection includeOutcomes = 2;
      repeated string languages = 3;
      repeated MarketMainType mainTypes = 4;
      bool includePrices = 5;
      bool includeRegulatoryFilter = 6;
      bool includeNotDisplayed = 7;
      bool includeOutcomeParticipants = 8;
      bool includeSourceInformation = 10;
      repeated string marketGroups = 11;
      int32 maxMarketResults = 12;
    }

    enum MarketTypeSelection {
        NoMarkets = 0;
        AllMarkets = 1;
        FirstOfTypes = 2;
        AllOfTypes = 3;
        AllActive = 4;
        AllOfGroups = 5;
        OnlySpecifiedMarkets = 6;
    }

    enum EventSortingStrategy {
        SortByEventId = 0;
        SortByStartTime = 1;
        SortByStartTimeDesc = 2;
        SortByLastUpdated = 3;
        SortByLastUpdatedDesc = 4;
        SortUsingLegacyMethodDeprecated = 10;
    }

    enum OutcomeSelection {
        NoOutcomes = 0;
        AllOutcomes = 1;
        WithUniqueParticipants = 2;
        OnlySpecifiedOutcomes = 3;
    }
---
apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: core-mapper-service-api-scoreboard.Scoreboards
  description: GetScoreboard / GetScoreboards / SelectEventIds / SelectScoreboards / SubscribeChangedEvents
spec:
  type: grpc
  lifecycle: production
  owner: group:product-search
  system: system-a
  definition: |
    syntax = "proto3";

    option csharp_namespace = "SportsbookCore.Mapper.Api";

    package scoreboard;

    import "google/protobuf/wrappers.proto";
    import "google/protobuf/timestamp.proto";
    import "Offer/Common.proto";

    service Scoreboards {

      rpc GetScoreboard (GetScoreboardRequest) returns (GetScoreboardResponse);

      rpc GetScoreboards (GetScoreboardsRequest) returns (GetScoreboardsResponse);

      rpc SelectScoreboards (SelectScoreboardsRequest) returns (GetScoreboardsResponse);

      rpc SelectEventIds (SelectScoreboardEventIdsRequest) returns (GetScoreboardEventIdsResponse);

      rpc SubscribeChangedEvents (SubscribeChangedScoreboardsRequest) returns (stream SubscribeChangedScoreboardsResponse);
    }

    message GetScoreboardRequest {
      int64 eventId = 1;
      ScoreboardSubselection subselection = 2;
    }

    message GetScoreboardResponse {
      Scoreboard scoreboard = 1;
    }

    message GetScoreboardsRequest {
      repeated int64 eventIds = 1;
      ScoreboardSubselection subselection = 2;
    }

    message GetScoreboardsResponse {
      repeated Scoreboard scoreboards = 1;
    }

    message SelectScoreboardEventIdsRequest {
      ScoreboardSelector selector = 1;
      int64 maxResults = 2;
    }

    message SelectScoreboardsRequest {
      ScoreboardSelector selector = 1;
      ScoreboardSubselection subselection = 2;
      int64 maxResults = 3;
    }

    message GetScoreboardEventIdsResponse {
      repeated int64 eventIds = 1;
    }

    message SubscribeChangedScoreboardsRequest {
      ScoreboardSelector selector = 1;
      int64 maxResults = 2;
    }

    message SubscribeChangedScoreboardsResponse {
      int64 eventId = 1;
    }

    message ScoreboardSelector {
      string deprecatedSport = 1 [deprecated = true];
    }

    message ScoreboardSubselection {
      bool includeScores = 1; // If true, include detailed (sport-specific) scores.
      bool deprecatedIncludeEvents = 2 [deprecated = true]; // Deprecated -- was never implemented
      repeated string deprecatedLanguages = 3 [deprecated = true]; // Deprecated -- Scoreboard data is not translatable (or should not be)
    }

    /**
     Represents the current state of a scoreboard for a fixture (event).
     */
    message Scoreboard {
        int64 id = 1; // The event ID.
        string deprecatedSport = 2 [deprecated = true]; // Deprecated. Do not use. Specifically, contains invalid sport identifiers w.r.t Offer data.
        google.protobuf.Int64Value time = 3; // The match clock in the unit defined by clockType.
        bool clockDisplayed = 5; // True if clock is to be displayed.
        bool clockRunning = 6; // True if clock is running.
        ClockType clockType = 7; // The unit of measure for the clock.

        Score defaultScore = 10;
        SoccerScores soccerScores = 11;
        TennisScores tennisScores = 12;
        BasketballScores basketballScores = 13;
        BaseballScores baseballScores = 14;
        IcehockeyScores icehockeyScores = 15;
        VolleyballScores volleyballScores = 16;
        AmericanFootballScores americanFootballScores = 17;
        RugbyScores rugbyScores = 18;


        Property deprecatedPeriod = 30 [deprecated = true]; // Deprecated. Use symbolic periods (periodType, periodIndex).
        int64 numberOfPeriods = 31; // Number of periods in total.
        google.protobuf.Int64Value periodIndex = 32; // The current period index, depending on periodType.
        PeriodType periodType = 33; // The current period or match state type.

        google.protobuf.Timestamp lastUpdated = 50;
        int64 xapiLastVersion = 51;
    }

    message SoccerScores {
        Score halfTime = 1;
        Score fullTime = 2;
        Score extraTime1 = 3;
        Score extraTime2 = 4;
        Score penaltyGoals = 5;
        Score corners = 6;
        Score yellowCards = 7;
        Score redCards = 8;
        Score penalties = 9;
        Score extraTime = 10;
    }

    message TennisScores {
        TextScore displayedPoints = 1;
        repeated Score sets = 2;
        Score points = 3;
        Score tiebreak = 4;
    }

    message BasketballScores {
        repeated Score quarters = 1;
        Score firstHalf = 2;
        Score secondHalf = 3;
        Score overtime = 4;
        Score points = 5;
        Score freeThrows = 6;
        Score twoPoints = 7;
        Score threePoints = 8;
    }

    message BaseballScores {
        repeated Score inning = 1;
    }

    message IcehockeyScores {
        Score firstPeriod = 1;
        Score overtime = 2;
        Score penaltyShootout = 3;
        Score powerPlay = 4;
        Score secondPeriod = 5;
        Score thirdPeriod = 6;
    }

    message VolleyballScores {
        repeated Score sets = 1;
        Score timeouts = 2;
        Score goldenSet = 3;
    }

    message AmericanFootballScores {
        repeated Score quarters = 1;
        Score fieldGoal = 2;
        Score overtime = 3;
        Score patKick = 4;
        Score patTouchdown = 5;
        Score points = 6;
        Score safety = 7;
        Score touchdown = 8;
    }

    message RugbyScores {
        Score conversions = 1;
        Score drops = 2;
        Score extraTime = 3;
        Score firstHalf = 4;
        Score penalties = 5;
        Score penaltiesTime = 6;
        Score points = 7;
        Score redCards = 8;
        Score secondHalf = 9;
        Score tries = 10;
        Score yellowCards = 11;
    }

    message Score {
        int64 homeScore = 1;
        int64 awayScore = 2;
    }

    message TextScore {
        string homeScore = 1;
        string awayScore = 2;
    }

    enum ClockType {
        Seconds = 0;
        Minutes = 1;
    }

    enum PeriodType {
        PeriodTypeUndefined = 0;
        PeriodTypeAwaitingStart = 1;
        PeriodTypeFullTime = 2;
        PeriodTypePeriodBreak = 3;
        PeriodTypeCancelled = 4;
        PeriodTypePostponed = 5;
        PeriodTypeDelayed = 6;
        PeriodTypeSuspended = 7;
        PeriodTypeFinished = 8;
        PeriodTypeExtraTime = 9;
        PeriodTypeSuddenDeath = 10;
        PeriodTypeRetired = 11;
        PeriodTypeWalkover = 12;
        PeriodTypePenalties = 13;
        PeriodTypeHalf = 20;
        PeriodTypePeriod = 21;
        PeriodTypeSet = 22;
        PeriodTypeInning = 23;
        PeriodTypeQuarter = 24;
    }
---
apiVersion: backstage.io/v1alpha1
kind: Resource
metadata:
  name: cmbentities--popularity-static
  description: cmbentities--popularity-static description
  annotations:
    backstage.io/view-url: https://portal.azure.com/#blade/Microsoft_Azure_Storage/ContainerMenuBlade/overview/storageAccountId/%2Fsubscriptions%2F7e1fa0d3-1192-4578-a34d-cf005d9c6865%2FresourceGroups%2Fcmb-dataanalytics-prod-cmb%2Fproviders%2FMicrosoft.Storage%2FstorageAccounts%2Fcmbentities/path/popularity-static/etag/%220x8D9204190503522%22/defaultEncryptionScope/%24account-encryption-key/denyEncryptionScopeOverride//defaultId//publicAccessVal/None
    backstage.io/edit-url: https://portal.azure.com/#blade/Microsoft_Azure_Storage/ContainerMenuBlade/overview/storageAccountId/%2Fsubscriptions%2F7e1fa0d3-1192-4578-a34d-cf005d9c6865%2FresourceGroups%2Fcmb-dataanalytics-prod-cmb%2Fproviders%2FMicrosoft.Storage%2FstorageAccounts%2Fcmbentities/path/popularity-static/etag/%220x8D9204190503522%22/defaultEncryptionScope/%24account-encryption-key/denyEncryptionScopeOverride//defaultId//publicAccessVal/None
  links:
    - url: https://portal.azure.com/#blade/Microsoft_Azure_Storage/ContainerMenuBlade/overview/storageAccountId/%2Fsubscriptions%2F7e1fa0d3-1192-4578-a34d-cf005d9c6865%2FresourceGroups%2Fcmb-dataanalytics-prod-cmb%2Fproviders%2FMicrosoft.Storage%2FstorageAccounts%2Fcmbentities/path/popularity-static/etag/%220x8D9204190503522%22/defaultEncryptionScope/%24account-encryption-key/denyEncryptionScopeOverride//defaultId//publicAccessVal/None
      title: Azure Container
      icon: dashboard  
spec:
  type: azure-blob
  lifecycle: production
  owner: group:product-search
  system: system-a
  dependencyOf:
    - component:search-indexer
  dependsOn:
    - component:StaticPopularityEntityId-job
---
apiVersion: backstage.io/v1alpha1
kind: Resource
metadata:
  name: eventhub--combination-placements
  description: eventhub--combination-placements description
spec:
  type: eventhub
  lifecycle: production
  owner: group:product-search
  system: system-a
  dependencyOf:
    - component:PlacementsV2-job
---
apiVersion: backstage.io/v1alpha1
kind: Resource
metadata:
  name: cmbanalyticsstor--ingest-placements
  description: cmbanalyticsstor--ingest-placements description
spec:
  type: azure-blob-delta-lake
  lifecycle: production
  owner: group:product-search
  system: system-a
  dependsOn:
    - component:PlacementsV2-job
  dependencyOf:
    - component:UserPlacementsV2-job
---
apiVersion: backstage.io/v1alpha1
kind: Resource
metadata:
  name: cmbanalyticsstor--refined-user-placements
  description: cmbanalyticsstor--refined-user-placements description
spec:
  type: azure-blob-delta-lake
  lifecycle: production
  owner: group:product-search
  system: system-a
  dependsOn:
    - component:UserPlacementsV2-job
  dependencyOf:
    - component:EnrichedUserPlacements-job
---
apiVersion: backstage.io/v1alpha1
kind: Resource
metadata:
  name: cmbanalyticsstor--enriched-user-placements
  description: cmbanalyticsstor--enriched-user-placements description
spec:
  type: azure-blob
  lifecycle: production
  owner: group:product-search
  system: system-a
  dependencyOf:
    - component:UserPlacementsEntityCountryFull-job
    - component:UserPlacementsEntityCountryShortTerm-job
    - component:RealTimeEntityPopularity-job
  dependsOn:
    - component:EnrichedUserPlacements-job
---
apiVersion: backstage.io/v1alpha1
kind: Resource
metadata:
  name: cmbanalyticsstor--refined-mapped-swix-dumps
  description: cmbanalyticsstor--refined-mapped-swix-dumps description
spec:
  type: azure-blob
  lifecycle: production
  owner: group:product-search
  system: system-a
  dependencyOf:
    #- component:TODO: CoreToEntityMapper-job
    #- component:TODO: Entities-Offer-job
    - component:EnrichedUserPlacements-job
    #- component:TODO: SportsFeedsLocations-job
  #dependsOn:
    #- component:TODO: CoreOffersRunner-job
---
apiVersion: backstage.io/v1alpha1
kind: Resource
metadata:
  name: cmbentities--popularity-realtime
  description: daily / weekly / monthly / yearly
spec:
  type: azure-blob
  lifecycle: production
  owner: group:product-search
  system: system-a
  dependencyOf:
    - component:entity-service
    - component:search-indexer
  dependsOn:
    - component:RealTimeEntityPopularity-job
---
apiVersion: backstage.io/v1alpha1
kind: Resource
metadata:
  name: cmbanalyticsstor--user-placements-entity-country
  description: long and short term (per entity type)
spec:
  type: azure-blob
  lifecycle: production
  owner: group:product-search
  system: system-a
  dependencyOf:
    - component:NormalizedUserInterestShortTerm-job
    - component:NormalizedUserInterestFull-job
    #TODO:- component:PerUserPopularity-job
    #TODO:- component:NormalizedEntityInterest-job
    #TODO:- component:normalizedCountryInterestShortTerm-job
    #TODO:- component:normalizedCountryInterestFull-job
  dependsOn:
    - component:UserPlacementsEntityCountryShortTerm-job
    - component:UserPlacementsEntityCountryFull-job    
---
apiVersion: backstage.io/v1alpha1
kind: Resource
metadata:
  name: cmbanalyticsstor--normalized-user-interest
  description: full and short term
spec:
  type: azure-blob
  lifecycle: production
  owner: group:product-search
  system: system-a
  dependencyOf:
    - component:KMeansUserClusteringModelBuilder-job  
    #TODO:- component:UserClusgterPopularity-job
    #TODO:- component:UserClustering
  dependsOn:
    - component:NormalizedUserInterestShortTerm-job
    - component:NormalizedUserInterestFull-job
---
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: StaticPopularityEntityId-job
  description: databricks job
spec:
  type: databricks-job
  lifecycle: production
  owner: group:product-search
  system: system-a
  subcomponentOf: Sports-Data-DataBricks-Popularity
  #partOf:
  #  - component:Sports-Data-DataBricks-Popularity  
  dependencyOf:
    - resource:cmbentities--popularity-static
---
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: Sports-Search-Engine
  links:
    - url: https://github.com/CombinationAB/Sports-Search-Engine
      title: GitHub Repo
      icon: github  
spec:
  type: github-repository
  lifecycle: production
  owner: group:product-search
  system: system-a
  #hasPart:
  #  - component:search-engine
---
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: Sports-Client-SportsbookCoreMapper
  links:
    - url: https://github.com/CombinationAB/Sports-Client-SportsbookCoreMapper
      title: GitHub Repo
      icon: github  
spec:
  type: github-repository
  lifecycle: production
  owner: group:product-search
  system: system-a
  #hasPart:
  #  - component:core-mapper-service
---
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: Sports-Data-DataBricks-Popularity
  links:
    - url: https://github.com/CombinationAB/Sports-Data-DataBricks-Popularity
      title: GitHub Repo
      icon: github  
spec:
  type: github-repository
  lifecycle: production
  owner: group:product-search
  system: system-a
  #hasPart:
  #  - component:StaticPopularityEntityId-job
---
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: Sports-Data-DataBricks-Ingest
  links:
    - url: https://github.com/CombinationAB/Sports-Data-DataBricks-Ingest
      title: GitHub Repo
      icon: github  
spec:
  type: github-repository
  lifecycle: production
  owner: group:product-search
  system: system-a
---
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: PlacementsV2-job
  description: databricks job
spec:
  type: databricks-job
  lifecycle: production
  owner: group:product-search
  system: system-a
  subcomponentOf: Sports-Data-DataBricks-Ingest
  dependencyOf:
    - resource:cmbanalyticsstor--ingest-placements
  dependsOn:
    - resource:eventhub--combination-placements
---
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: UserPlacementsV2-job
  description: databricks job
spec:
  type: databricks-job
  lifecycle: production
  owner: group:product-search
  system: system-a
  subcomponentOf: Sports-Data-DataBricks-Popularity
  dependencyOf:
    - resource:cmbanalyticsstor--refined-user-placements
  dependsOn:
    - resource:cmbanalyticsstor--ingest-placements
---
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: EnrichedUserPlacements-job
  description: databricks job
spec:
  type: databricks-job
  lifecycle: production
  owner: group:product-search
  system: system-a
  subcomponentOf: Sports-Data-DataBricks-Popularity
  dependsOn:
    - resource:cmbanalyticsstor--refined-user-placements
    - resource:cmbanalyticsstor--refined-mapped-swix-dumps
  dependencyOf:
    - resource:cmbanalyticsstor--enriched-user-placements
---
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: RealTimeEntityPopularity-job
  description: databricks job
spec:
  type: databricks-job
  lifecycle: production
  owner: group:product-search
  system: system-a
  subcomponentOf: Sports-Data-DataBricks-Popularity
  dependsOn:
    - resource:cmbanalyticsstor--enriched-user-placements
  dependencyOf:
    - resource:cmbentities--popularity-realtime
---
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: UserPlacementsEntityCountryFull-job
  description: databricks job
spec:
  type: databricks-job
  lifecycle: production
  owner: group:product-search
  system: system-a
  subcomponentOf: Sports-Data-DataBricks-Popularity
  dependsOn:
    - resource:cmbanalyticsstor--enriched-user-placements
  dependencyOf:
    - resource:cmbanalyticsstor--user-placements-entity-country
---
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: UserPlacementsEntityCountryShortTerm-job
  description: databricks job
spec:
  type: databricks-job
  lifecycle: production
  owner: group:product-search
  system: system-a
  subcomponentOf: Sports-Data-DataBricks-Popularity
  dependsOn:
    - resource:cmbanalyticsstor--enriched-user-placements
  dependencyOf:
    - resource:cmbanalyticsstor--user-placements-entity-country
---
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: NormalizedUserInterestFull-job
  description: databricks job
spec:
  type: databricks-job
  lifecycle: production
  owner: group:product-search
  system: system-a
  subcomponentOf: Sports-Data-DataBricks-Popularity
  dependsOn:
    - resource:cmbanalyticsstor--user-placements-entity-country
  dependencyOf:
    - resource:cmbanalyticsstor--normalized-user-interest
---
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: NormalizedUserInterestShortTerm-job
  description: databricks job
spec:
  type: databricks-job
  lifecycle: production
  owner: group:product-search
  system: system-a
  subcomponentOf: Sports-Data-DataBricks-Popularity
  dependsOn:
    - resource:cmbanalyticsstor--user-placements-entity-country
  dependencyOf:
    - resource:cmbanalyticsstor--normalized-user-interest
---
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: KMeansUserClusteringModelBuilder-job
  description: databricks job
spec:
  type: databricks-job
  lifecycle: production
  owner: group:product-search
  system: system-a
  subcomponentOf: Sports-Data-DataBricks-Popularity
  dependsOn:
    - resource:cmbanalyticsstor--normalized-user-interest
  #dependencyOf:
  #  TODO:- resource:cmbanalyticsstor--user-clustering-models